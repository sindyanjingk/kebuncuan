generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  username     String
  passwordHash String
  balance      Float          @default(0)
  createdAt    DateTime       @default(now())
  topUps       BalanceTopUp[]
  orders       Order[]
}

model Category {
  id        String     @id @default(cuid())
  name      String
  parentId  String?
  createdAt DateTime   @default(now())
  parent    Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children  Category[] @relation("SubCategories")
  products  Product[]

  @@unique([name, parentId])
  @@index([parentId])
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String
  price       Float
  categoryId  String
  providerId  String?
  type        ProductType
  active      Boolean          @default(true)
  createdAt   DateTime         @default(now())
  orders      Order[]
  category    Category         @relation(fields: [categoryId], references: [id])
  provider    ServiceProvider? @relation(fields: [providerId], references: [id])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  productId String
  status    OrderStatus @default(PENDING)
  target    String
  response  Json?
  createdAt DateTime    @default(now())
  product   Product     @relation(fields: [productId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  payment   Payment?
}

model Payment {
  id      String        @id @default(cuid())
  orderId String        @unique
  method  String
  amount  Float
  paidAt  DateTime?
  status  PaymentStatus @default(UNPAID)
  order   Order         @relation(fields: [orderId], references: [id])
}

model ServiceProvider {
  id       String    @id @default(cuid())
  name     String
  apiUrl   String
  apiKey   String
  products Product[]
}

model BalanceTopUp {
  id        String        @id @default(cuid())
  userId    String
  amount    Float
  method    String
  status    PaymentStatus @default(UNPAID)
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
}

enum ProductType {
  PPOB
  SMM
  VOUCHER
  PREMIUM_ACCOUNT
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
  PROCESSING
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
}
