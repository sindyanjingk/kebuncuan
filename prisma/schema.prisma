generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(cuid())
  storeId   String
  userId    String?
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  store     Store    @relation(fields: [storeId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Store {
  id         String        @id @default(cuid())
  name       String
  slug       String        @unique
  ownerId    String
  createdAt  DateTime      @default(now())
  templateId String?
  customers  Customer[]
  products   Product[]
  owner      User          @relation(fields: [ownerId], references: [id])
  template   Template?     @relation(fields: [templateId], references: [id])
  settings   StoreSetting?
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  createdAt    DateTime       @default(now())
  balance      Float          @default(0)
  passwordHash String
  username     String
  imageUrl     String?
  topUps       BalanceTopUp[]
  customers    Customer[]
  orders       Order[]
  stores       Store[]
}

model Category {
  id        String     @id @default(cuid())
  name      String
  parentId  String?
  createdAt DateTime   @default(now())
  parent    Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children  Category[] @relation("SubCategories")
  products  Product[]

  @@unique([name, parentId])
  @@index([parentId])
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String
  price       Float
  createdAt   DateTime         @default(now())
  active      Boolean          @default(true)
  categoryId  String
  storeId     String
  providerId  String?
  orders      Order[]
  category    Category         @relation(fields: [categoryId], references: [id])
  provider    ServiceProvider? @relation(fields: [providerId], references: [id])
  store       Store            @relation(fields: [storeId], references: [id])
  images      ProductImage[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  productId String
  response  Json?
  target    String
  product   Product     @relation(fields: [productId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  payment   Payment?
}

model Payment {
  id      String        @id @default(cuid())
  orderId String        @unique
  method  String
  amount  Float
  paidAt  DateTime?
  status  PaymentStatus @default(UNPAID)
  order   Order         @relation(fields: [orderId], references: [id])
}

model ServiceProvider {
  id       String    @id @default(cuid())
  name     String
  apiUrl   String
  apiKey   String
  products Product[]
}

model BalanceTopUp {
  id        String        @id @default(cuid())
  userId    String
  amount    Float
  method    String
  status    PaymentStatus @default(UNPAID)
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
}

model Template {
  id                String             @id @default(cuid())
  name              String
  category          TemplateCategory
  description       String
  previewImage      String
  thumbnailImage    String
  isActive          Boolean            @default(true)
  isPremium         Boolean            @default(false)
  price             Float              @default(0)
  features          Json
  config            Json
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  featuresConfig    FeaturesConfig[]
  heroConfig        HeroConfig?
  socialProofConfig SocialProofConfig?
  stores            Store[]
}

model HeroConfig {
  id              String   @id @default(cuid())
  templateId      String   @unique
  headline        String
  subheadline     String
  ctaText         String
  ctaUrl          String
  backgroundImage String?
  backgroundVideo String?
  overlayOpacity  Float    @default(0.3)
  textAlignment   String   @default("center")
  showStats       Boolean  @default(true)
  createdAt       DateTime @default(now())
  template        Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model FeaturesConfig {
  id          String   @id @default(cuid())
  templateId  String
  title       String
  description String
  icon        String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model SocialProofConfig {
  id               String        @id @default(cuid())
  templateId       String        @unique
  showTestimonials Boolean       @default(true)
  showPartnerLogos Boolean       @default(true)
  showUserCount    Boolean       @default(true)
  showRatings      Boolean       @default(true)
  userCountText    String        @default("Dipercaya 1000+ pengguna")
  averageRating    Float         @default(4.8)
  totalReviews     Int           @default(1200)
  createdAt        DateTime      @default(now())
  template         Template      @relation(fields: [templateId], references: [id], onDelete: Cascade)
  testimonials     Testimonial[]
}

model Testimonial {
  id             String            @id @default(cuid())
  socialProofId  String
  customerName   String
  customerAvatar String?
  customerTitle  String?
  content        String
  rating         Int               @default(5)
  isActive       Boolean           @default(true)
  order          Int               @default(0)
  createdAt      DateTime          @default(now())
  socialProof    SocialProofConfig @relation(fields: [socialProofId], references: [id], onDelete: Cascade)

  @@index([socialProofId])
}

model StoreSetting {
  id             String   @id @default(cuid())
  storeId        String   @unique
  primaryColor   String   @default("#2563eb")
  secondaryColor String   @default("#64748b")
  accentColor    String   @default("#10b981")
  fontFamily     String   @default("Inter")
  logoUrl        String?
  faviconUrl     String?
  customCss      String?
  customJs       String?
  socialLinks    Json?
  seoConfig      Json?
  contactInfo    Json?
  paymentMethods Json?
  shippingConfig Json?
  customization  Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  store          Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

enum ProductType {
  PPOB
  SMM
  VOUCHER
  PREMIUM_ACCOUNT
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
  PROCESSING
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
}

enum TemplateCategory {
  MARKETPLACE
  ECOMMERCE
  FASHION
  FOOD
  ELECTRONICS
  SERVICES
  GENERAL
}
