generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(cuid())
  storeId   String
  userId    String?
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  store     Store    @relation(fields: [storeId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Store {
  id         String        @id @default(cuid())
  name       String
  slug       String        @unique
  ownerId    String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt @default(now())
  deletedAt  DateTime?     // Soft delete field (null by default)
  templateId String?
  logoUrl    String?
  faviconUrl String?
  // Store address fields for Biteship integration
  address    String?       // Store address
  city       String?       // City name
  province   String?       // Province name
  postalCode String?       // Postal/ZIP code
  phone      String?       // Store phone number
  customers  Customer[]
  products   Product[]
  carts      Cart[]
  pages      StorePage[]
  owner      User          @relation(fields: [ownerId], references: [id])
  template   Template?     @relation(fields: [templateId], references: [id])
  settings   StoreSetting?
  shippingProvider ShippingProvider?
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  createdAt    DateTime       @default(now())
  balance      Float          @default(0)
  passwordHash String
  username     String
  imageUrl     String?
  // User contact and address fields
  phone        String?
  address      String?
  city         String?
  province     String?
  postalCode   String?
  country      String?        @default("Indonesia")
  topUps       BalanceTopUp[]
  customers    Customer[]
  orders       Order[]
  stores       Store[]
  carts        Cart[]
}

model Category {
  id        String     @id @default(cuid())
  name      String
  parentId  String?
  createdAt DateTime   @default(now())
  parent    Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children  Category[] @relation("SubCategories")
  products  Product[]

  @@unique([name, parentId])
  @@index([parentId])
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String
  price       Float            // Harga jual (customer price)
  modalPrice  Float            @default(0) // Harga modal (cost price)
  productType ProductType      @default(PPOB) // Tipe produk: PHYSICAL atau DIGITAL
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt @default(now())
  deletedAt   DateTime?        // Soft delete field
  active      Boolean          @default(true)
  categoryId  String
  storeId     String
  providerId  String?
  orders      Order[]
  cartItems   CartItem[]
  category    Category         @relation(fields: [categoryId], references: [id])
  provider    ServiceProvider? @relation(fields: [providerId], references: [id])
  store       Store            @relation(fields: [storeId], references: [id])
  images      ProductImage[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  productId String
  response  Json?
  target    String
  
  // Shipping information
  shipping_required   Boolean  @default(false)
  shipping_address    String?
  shipping_city       String?
  shipping_province   String?
  shipping_postal_code String?
  shipping_phone      String?
  shipping_name       String?
  shipping_cost       Int?     // in cents
  shipping_courier    String?  // JNE, TIKI, etc
  shipping_service    String?  // REG, YES, etc
  
  product   Product     @relation(fields: [productId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  payment   Payment?
  shipment  Shipment?
}

model Payment {
  id      String        @id @default(cuid())
  orderId String        @unique
  method  String
  amount  Float
  paidAt  DateTime?
  status  PaymentStatus @default(UNPAID)
  order   Order         @relation(fields: [orderId], references: [id])
}

model ServiceProvider {
  id       String    @id @default(cuid())
  name     String
  apiUrl   String
  apiKey   String
  products Product[]
}

model BalanceTopUp {
  id        String        @id @default(cuid())
  userId    String
  amount    Float
  method    String
  status    PaymentStatus @default(UNPAID)
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
}

model Template {
  id                String             @id @default(cuid())
  name              String
  category          TemplateCategory
  description       String
  previewImage      String
  thumbnailImage    String
  isActive          Boolean            @default(true)
  isPremium         Boolean            @default(false)
  price             Float              @default(0)
  features          Json
  config            Json
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  featuresConfig    FeaturesConfig[]
  heroConfig        HeroConfig?
  socialProofConfig SocialProofConfig?
  stores            Store[]
}

model HeroConfig {
  id              String   @id @default(cuid())
  templateId      String   @unique
  headline        String
  subheadline     String
  ctaText         String
  ctaUrl          String
  backgroundImage String?
  backgroundVideo String?
  overlayOpacity  Float    @default(0.3)
  textAlignment   String   @default("center")
  showStats       Boolean  @default(true)
  createdAt       DateTime @default(now())
  template        Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model FeaturesConfig {
  id          String   @id @default(cuid())
  templateId  String
  title       String
  description String
  icon        String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
}

model SocialProofConfig {
  id               String        @id @default(cuid())
  templateId       String        @unique
  showTestimonials Boolean       @default(true)
  showPartnerLogos Boolean       @default(true)
  showUserCount    Boolean       @default(true)
  showRatings      Boolean       @default(true)
  userCountText    String        @default("Dipercaya 1000+ pengguna")
  averageRating    Float         @default(4.8)
  totalReviews     Int           @default(1200)
  createdAt        DateTime      @default(now())
  template         Template      @relation(fields: [templateId], references: [id], onDelete: Cascade)
  testimonials     Testimonial[]
}

model Testimonial {
  id             String            @id @default(cuid())
  socialProofId  String
  customerName   String
  customerAvatar String?
  customerTitle  String?
  content        String
  rating         Int               @default(5)
  isActive       Boolean           @default(true)
  order          Int               @default(0)
  createdAt      DateTime          @default(now())
  socialProof    SocialProofConfig @relation(fields: [socialProofId], references: [id], onDelete: Cascade)

  @@index([socialProofId])
}

model StoreSetting {
  id             String   @id @default(cuid())
  storeId        String   @unique
  primaryColor   String   @default("#2563eb")
  secondaryColor String   @default("#64748b")
  accentColor    String   @default("#10b981")
  fontFamily     String   @default("Inter")
  logoUrl        String?
  faviconUrl     String?
  customCss      String?
  customJs       String?
  socialLinks    Json?
  seoConfig      Json?
  contactInfo    Json?
  paymentMethods Json?
  shippingConfig Json?
  customization  Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  store          Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model StorePage {
  id          String        @id @default(cuid())
  storeId     String
  type        StorePageType
  title       String
  slug        String
  content     String        @db.Text
  metaTitle   String?
  metaDesc    String?
  isActive    Boolean       @default(true)
  order       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  store       Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, slug])
  @@index([storeId])
  @@index([storeId, type])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  storeId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  store     Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@unique([userId, storeId])
  @@index([userId])
  @@index([storeId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

enum ProductType {
  PHYSICAL          // Produk fisik - perlu pengiriman
  DIGITAL           // Produk digital - tidak perlu pengiriman
  PPOB
  SMM
  VOUCHER
  PREMIUM_ACCOUNT
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  SUCCESS
  FAILED
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
}

enum TemplateCategory {
  MARKETPLACE
  ECOMMERCE
  FASHION
  FOOD
  ELECTRONICS
  SERVICES
  GENERAL
}

enum StorePageType {
  ABOUT_US          // Tentang Kami
  FAQ               // FAQ
  BLOG              // Blog  
  CAREER            // Karir
  HELP_CENTER       // Pusat Bantuan
  CONTACT_US        // Hubungi Kami
  RETURN_POLICY     // Kebijakan Pengembalian
  WARRANTY_CLAIM    // Garansi & Klaim
  TRACK_ORDER       // Lacak Pesanan
  TERMS_CONDITIONS  // Syarat dan Ketentuan
  PRIVACY_POLICY    // Kebijakan Privasi
  SITEMAP           // Sitemap
}

// Biteship Integration Models
model ShippingProvider {
  id              String           @id @default(cuid())
  storeId         String
  is_active       Boolean         @default(true)
  origin_area_id  String?         // Biteship area ID for store location
  
  // Usage tracking for centralized API key
  monthly_usage   Int             @default(0)
  quota_limit     Int             @default(50)  // 50 requests per month default
  last_reset      DateTime        @default(now())
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  store           Store           @relation(fields: [storeId], references: [id])
  shipments       Shipment[]
  
  @@unique([storeId])
}

model Shipment {
  id                  String            @id @default(cuid())
  orderId             String            @unique
  providerId          String
  biteship_order_id   String?           // ID from Biteship
  waybill             String?           // Resi/tracking number
  status              ShipmentStatus    @default(PENDING)
  
  // Shipping details
  courier_company     String?           // JNE, TIKI, etc
  courier_type        String?           // REG, YES, ONS, etc
  origin_area_id      String?
  destination_area_id String?
  
  // Recipient info
  recipient_name      String
  recipient_phone     String
  recipient_address   String
  recipient_postal_code String
  
  // Package info
  weight              Int               // in grams
  length              Int?              // in cm
  width               Int?              // in cm  
  height              Int?              // in cm
  price               Int               // shipping cost in cents
  
  // Tracking
  tracking_events     Json?             // Array of tracking events from Biteship
  estimated_delivery  DateTime?
  actual_delivery     DateTime?
  
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  order               Order             @relation(fields: [orderId], references: [id])
  provider            ShippingProvider  @relation(fields: [providerId], references: [id])
  
  @@index([biteship_order_id])
  @@index([waybill])
  @@index([status])
}

enum ShipmentStatus {
  PENDING           // Belum diproses
  CONFIRMED         // Dikonfirmasi
  ALLOCATED         // Dialokasikan ke kurir
  PICKING_UP        // Sedang dijemput
  PICKED_UP         // Sudah dijemput
  DROPPING_OFF      // Sedang diantar
  DELIVERED         // Terkirim
  RETURNED          // Dikembalikan
  CANCELLED         // Dibatalkan
  ON_HOLD          // Ditahan
}
